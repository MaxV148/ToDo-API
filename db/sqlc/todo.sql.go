// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: todo.sql

package db

import (
	"context"
	"time"
)

const createToDo = `-- name: CreateToDo :one
INSERT INTO todo (title, content, created_by, category)
VALUES ($1, $2, $3, $4)
RETURNING id, title, content, done, created_by, category, created_at
`

type CreateToDoParams struct {
	Title     string
	Content   string
	CreatedBy int64
	Category  int64
}

func (q *Queries) CreateToDo(ctx context.Context, arg CreateToDoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createToDo,
		arg.Title,
		arg.Content,
		arg.CreatedBy,
		arg.Category,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Done,
		&i.CreatedBy,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const deleteToDo = `-- name: DeleteToDo :exec
DELETE
FROM todo
WHERE id = $1
`

func (q *Queries) DeleteToDo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteToDo, id)
	return err
}

const listToDoForUser = `-- name: ListToDoForUser :many
SELECT todo.id         as ToDoId,
       title           as ToDoTitle,
       content         as ToDoContent,
       done,
       "name"          as categoryName,
       todo.created_at as ToDoCreatedAt,
       created_by      as ToDoCreatedBy
FROM todo
         JOIN category on todo.category = category.id
WHERE created_by = $1
ORDER BY categoryName DESC
`

type ListToDoForUserRow struct {
	Todoid        int64
	Todotitle     string
	Todocontent   string
	Done          bool
	Categoryname  string
	Todocreatedat time.Time
	Todocreatedby int64
}

func (q *Queries) ListToDoForUser(ctx context.Context, createdBy int64) ([]ListToDoForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listToDoForUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListToDoForUserRow{}
	for rows.Next() {
		var i ListToDoForUserRow
		if err := rows.Scan(
			&i.Todoid,
			&i.Todotitle,
			&i.Todocontent,
			&i.Done,
			&i.Categoryname,
			&i.Todocreatedat,
			&i.Todocreatedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleToDoDone = `-- name: ToggleToDoDone :one
UPDATE todo
set done = NOT todo.done
where id = $1
RETURNING id, title, content, done, created_by, category, created_at
`

func (q *Queries) ToggleToDoDone(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, toggleToDoDone, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Done,
		&i.CreatedBy,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const updateToDo = `-- name: UpdateToDo :one
UPDATE todo
set title   = $2,
    content = $3
WHERE id = $1
RETURNING id, title, content, done, created_by, category, created_at
`

type UpdateToDoParams struct {
	ID      int64
	Title   string
	Content string
}

func (q *Queries) UpdateToDo(ctx context.Context, arg UpdateToDoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateToDo, arg.ID, arg.Title, arg.Content)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Done,
		&i.CreatedBy,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}
